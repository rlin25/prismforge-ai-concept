apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prismforge-ai-ingress
  namespace: prismforge-ai
  labels:
    app.kubernetes.io/name: prismforge-ai
    app.kubernetes.io/component: ingress
  annotations:
    # NGINX Ingress Controller annotations
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Security annotations
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-expose-headers: "Content-Length,Content-Range"
    nginx.ingress.kubernetes.io/cors-max-age: "1728000"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit-connections: "20"
    nginx.ingress.kubernetes.io/rate-limit-requests-per-second: "5"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # Connection and timeout settings
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-ancestors 'none';";
    
    # Load balancing
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    
    # Certificate management (cert-manager)
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
    # AWS Load Balancer Controller annotations (alternative to NGINX)
    # alb.ingress.kubernetes.io/scheme: internet-facing
    # alb.ingress.kubernetes.io/target-type: ip
    # alb.ingress.kubernetes.io/backend-protocol: HTTP
    # alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    # alb.ingress.kubernetes.io/ssl-redirect: '443'
    # alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:region:account:certificate/cert-id
spec:
  tls:
  - hosts:
    - prismforge-ai.example.com
    - "*.prismforge-ai.example.com"
    secretName: prismforge-ai-tls
  rules:
  - host: prismforge-ai.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prismforge-ai-app
            port:
              number: 80
  - host: api.prismforge-ai.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prismforge-ai-app
            port:
              number: 80
---
# Alternative: Istio Gateway and VirtualService for service mesh
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: prismforge-ai-gateway
  namespace: prismforge-ai
  labels:
    app.kubernetes.io/name: prismforge-ai
    app.kubernetes.io/component: gateway
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - prismforge-ai.example.com
    tls:
      httpsRedirect: true
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: prismforge-ai-tls
    hosts:
    - prismforge-ai.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: prismforge-ai-vs
  namespace: prismforge-ai
  labels:
    app.kubernetes.io/name: prismforge-ai
    app.kubernetes.io/component: virtual-service
spec:
  hosts:
  - prismforge-ai.example.com
  gateways:
  - prismforge-ai-gateway
  http:
  - match:
    - uri:
        prefix: /api/
    route:
    - destination:
        host: prismforge-ai-app.prismforge-ai.svc.cluster.local
        port:
          number: 80
    fault:
      delay:
        percentage:
          value: 0.1
        fixedDelay: 5s
    retries:
      attempts: 3
      perTryTimeout: 30s
    timeout: 60s
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: prismforge-ai-app.prismforge-ai.svc.cluster.local
        port:
          number: 80
    timeout: 30s
---
# Network Policy for Ingress traffic
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: prismforge-ai-ingress-policy
  namespace: prismforge-ai
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: prismforge-ai
      app.kubernetes.io/component: app
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
  - ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 3000